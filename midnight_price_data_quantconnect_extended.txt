from AlgorithmImports import *

class DailyBiasAlgorithm(QCAlgorithm):

    def Initialize(self):
        self.SetStartDate(2022, 10, 1)
        self.SetEndDate(2023, 8, 28)
        self.SetCash(100000)
        self.symbol1 = "SPX500USD" # Replace with your desired symbol
        self.symbol2 = "VIX"

        # Request minute data
        self.spx_cfd = self.AddCfd(self.symbol1, Resolution.Minute)
        self.vix_cfd = self.AddIndex(self.symbol2, Resolution.Minute)
        self.window = 35000  # Number of hourly candles for the linear regression window

        #self.Schedule.On(self.DateRules.EveryDay(self.symbol), self.TimeRules.At(20, 0), self.DailyBiasSignal)
        self.Schedule.On(self.DateRules.Every(DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Sunday),
                         self.TimeRules.At(19, 0), self.MidnightSignal)

        self.daily_signal = 0

        self.Debug(f"MidnightData: Date,Price,spx_h4_zone,spx_pearson_h4,spx_h1_zone,spx_pearson_h1,vix_h1_zone,vix_pearson_h1,vix_30m_zone,vix_pearson_30m")


    def MidnightSignal(self):

            # Calculate Linear Regression Channel
            #history = self.History(self.symbol1, self.window, Resolution.Minute)
            history = self.History[QuoteBar](self.symbol1, self.window, Resolution.Minute, extendedMarketHours=True)

            close_prices = [bar.Close for bar in history]  # Extract close prices from TradeBar objects
            close_dates = [bar.Time for bar in history]
            df = pd.DataFrame(index=close_dates)
            df['Close'] = close_prices
            df.index = pd.to_datetime(df.index)

            history2 = self.History(self.symbol2, self.window, Resolution.Minute, extendedMarketHours=True)
            #history2 = self.History[QuoteBar](self.symbol2, self.window, Resolution.Minute, extendedMarketHours=True)

            close_prices2 = [bar.Close for bar in history2]  # Extract close prices from TradeBar objects
            close_dates2 = [bar.Time for bar in history2]
            df2 = pd.DataFrame(index=close_dates2)
            df2['Close'] = close_prices2
            df2.index = pd.to_datetime(df2.index)

            if close_prices:

                current_price_spx = self.Securities[self.symbol1].Price
                current_price_vix = self.Securities[self.symbol2].Price
                current_date = self.Time

                df_h4 = df.copy()
                df_h4 = df_h4.resample('4H').agg({
                    'Close': 'last' })

                df_h4.dropna(inplace=True)

                df_h4 = df_h4.iloc[-100:,:]

                x_h4 = range(len(df_h4['Close']))
                slope_h4, intercept_h4 = np.polyfit(x_h4, df_h4['Close'], 1)
                linear_regression_line_h4 = slope_h4 * x_h4 + intercept_h4


                if current_price_spx > linear_regression_line_h4[-1]:
                    lr_line_h4 = 'Sell Zone'
                else:
                    lr_line_h4 = 'Buy Zone'

                pearson_h4 = np.corrcoef(df_h4['Close'].to_list(), linear_regression_line_h4)[0, 1]

                if linear_regression_line_h4[-1] < linear_regression_line_h4[-2]:
                    pearson_h4 = pearson_h4 * -1
                
                std_dev_h4 = df_h4['Close'].std() * 1

                upper_channel_line_h4 = linear_regression_line_h4 + std_dev_h4
                lower_channel_line_h4 = linear_regression_line_h4 - std_dev_h4

                upper_line_adjust_h4 = (upper_channel_line_h4[-1] + linear_regression_line_h4[-1])/2
                lower_line_adjust_h4 = (lower_channel_line_h4[-1] + linear_regression_line_h4[-1])/2

                df_h1 = df.copy()
                df_h1 = df_h1.resample('1H').agg({
                    'Close': 'last' })

                df_h1.dropna(inplace=True)

                df_h1 = df_h1.iloc[-100:,:]

                x_h1 = range(len(df_h1['Close']))
                slope_h1, intercept_h1 = np.polyfit(x_h1, df_h1['Close'], 1)
                linear_regression_line_h1 = slope_h1 * x_h1 + intercept_h1

                if current_price_spx > linear_regression_line_h1[-1]:
                    lr_line_h1 = 'Sell Zone'
                else:
                    lr_line_h1 = 'Buy Zone'
                
                pearson_h1 = np.corrcoef(df_h1['Close'].to_list(), linear_regression_line_h1)[0, 1]

                if linear_regression_line_h1[-1] < linear_regression_line_h1[-2]:
                    pearson_h1 = pearson_h1 * -1

                std_dev_h1 = df_h1['Close'].std() * 1.5

                upper_channel_line_h1 = linear_regression_line_h1 + std_dev_h1
                lower_channel_line_h1 = linear_regression_line_h1 - std_dev_h1

                upper_line_adjust_h1 = (upper_channel_line_h1[-1] + linear_regression_line_h1[-1])/2
                lower_line_adjust_h1 = (lower_channel_line_h1[-1] + linear_regression_line_h1[-1])/2

                ####################################### VIX ##################################
                

                df_h1_vix = df2.copy()

                df_h1_vix = df_h1_vix.resample('1H').agg({
                    'Close': 'last' })

                df_h1_vix.dropna(inplace=True)

                df_h1_vix = df_h1_vix.iloc[-100:,:]

                x_h1_vix = range(len(df_h1_vix['Close']))
                slope_h1_vix, intercept_h1_vix = np.polyfit(x_h1_vix, df_h1_vix['Close'], 1)
                linear_regression_line_h1_vix = slope_h1_vix * x_h1_vix + intercept_h1_vix

                if current_price_vix > linear_regression_line_h1_vix[-1]:
                    lr_line_h1_vix = 'Sell Zone'
                else:
                    lr_line_h1_vix = 'Buy Zone'


                pearson_h1_vix = np.corrcoef(df_h1_vix['Close'].to_list(), linear_regression_line_h1_vix)[0, 1]

                if linear_regression_line_h1_vix[-1] < linear_regression_line_h1_vix[-2]:
                    pearson_h1_vix = pearson_h1_vix * -1

                std_dev_h1_vix = df_h1_vix['Close'].std() * 1.5

                upper_channel_line_h1_vix = linear_regression_line_h1_vix + std_dev_h1_vix
                lower_channel_line_h1_vix = linear_regression_line_h1_vix - std_dev_h1_vix

                upper_line_adjust_h1_vix = (upper_channel_line_h1_vix[-1] + linear_regression_line_h1_vix[-1])/2
                lower_line_adjust_h1_vix = (lower_channel_line_h1_vix[-1] + linear_regression_line_h1_vix[-1])/2

                df_30m_vix = df2.copy()
                df_30m_vix  = df_30m_vix.resample('30min').agg({
                    'Close': 'last' })

                df_30m_vix.dropna(inplace=True)

                df_30m_vix = df_30m_vix.iloc[-100:,:]

                x_30m_vix = range(len(df_30m_vix['Close']))
                slope_30m_vix, intercept_30m_vix = np.polyfit(x_30m_vix, df_30m_vix['Close'], 1)
                linear_regression_line_30m_vix = slope_30m_vix * x_30m_vix + intercept_30m_vix

                if current_price_vix > linear_regression_line_30m_vix[-1]:
                    lr_line_30m_vix = 'Sell Zone'
                else:
                    lr_line_30m_vix = 'Buy Zone'

                pearson_30m_vix = np.corrcoef(df_30m_vix['Close'].to_list(), linear_regression_line_30m_vix)[0, 1]

                if linear_regression_line_30m_vix[-1] < linear_regression_line_30m_vix[-2]:
                    pearson_30m_vix = pearson_30m_vix * -1

                std_dev_30m_vix = df_30m_vix['Close'].std() * 1.34

                upper_channel_line_30m_vix = linear_regression_line_30m_vix + std_dev_30m_vix
                lower_channel_line_30m_vix = linear_regression_line_30m_vix - std_dev_30m_vix

                upper_line_adjust_30m_vix = (upper_channel_line_30m_vix[-1] + linear_regression_line_30m_vix[-1])/2
                lower_line_adjust_30m_vix = (lower_channel_line_30m_vix[-1] + linear_regression_line_30m_vix[-1])/2

                self.Debug(f"MidnightData: {current_date},{current_price_spx},{lr_line_h4},{pearson_h4},{lr_line_h1},{pearson_h1},{lr_line_h1_vix},{pearson_h1_vix},{lr_line_30m_vix},{pearson_30m_vix}")


    def OnEndOfAlgorithm(self):

        self.Debug("Backtest completed.")
